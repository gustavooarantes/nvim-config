-- ~/.config/nvim/lua/plugins/monokai_black.lua
return {
  {
    "loctvl842/monokai-pro.nvim",
    name = "monokai-pro",
    lazy = false,
    priority = 1000,
    config = function()
      vim.o.termguicolors = true
      vim.opt.background = "dark"

      -- Monokai-Pro setup (classic filter)
      require("monokai-pro").setup({
        filter = "classic",
        transparent_background = false,
      })

      vim.cmd("colorscheme monokai-pro")

      local BLACK = "#000000"
      local SEL_BG = "#323232" -- selection background
      local function force_bg(groups, bg)
        bg = bg or BLACK
        for _, g in ipairs(groups) do
          pcall(vim.api.nvim_set_hl, 0, g, { bg = bg })
        end
      end

      -- Base UI highlights
      local base_ui = {
        "Normal", "NormalNC", "SignColumn", "VertSplit", "LineNr", "CursorLineNr",
        "NormalFloat", "FloatBorder", "MsgArea", "MsgSeparator",
        "StatusLine", "StatusLineNC", "TabLine", "TabLineFill", "TabLineSel",
        "CursorLine", "CursorColumn", "CmdLine", "CmdLinePrompt",
        "Pmenu", "PmenuSel", "PmenuSbar", "PmenuThumb",
        "TelescopeNormal", "TelescopeBorder",
        "TelescopePromptNormal", "TelescopePromptBorder",
        "TelescopePreviewNormal", "TelescopePreviewBorder",
        "TelescopeResultsNormal", "TelescopeResultsBorder",
      }

      -- Plugin-specific highlights
      local plugin_ui = {
        -- Noice cmdline
        "NoiceCmdlinePopup", "NoiceCmdlinePopupBorder", "NoiceCmdlinePopupPrompt",
        "NoiceCmdline", "NoiceCmdlinePopupTitle",
        -- Floats / Nui
        "NuiLine", "NuiCursorLine", "NuiFloat",
        "WhichKeyFloat", "WhichKeyBorder",
        "NotifyBackground", "NotifyERRORBorder", "NotifyWARNBorder",
        "NotifyINFOBorder", "NotifyDEBUGBorder",
        "FloatTitle", "FloatTitleInverse",
        -- completion
        "CmpDoc", "CmpDocBorder", "CmpItemAbbr", "CmpItemAbbrDeprecated",
        "CmpItemAbbrMatch", "CmpItemAbbrMatchFuzzy", "CmpItemKind", "CmpItemMenu",
        -- dap-ui
        "DapUINormal", "DapUIFloatBorder", "DapUIFloatNormal", "DapUIScope",
        "DapUIBreakpointsPath", "DapUIBreakpointsInfo", "DapUIWatchesNormal",
        "DapUIWatchesEmpty", "DapUIWatchesValue", "DapUIStacksNormal",
        "DapUIThreadsNormal", "DapUIWinSelect",
        -- treesitter context
        "TreesitterContext", "TreesitterContextSeparator",
        -- lualine
        "LualineA", "LualineB", "LualineC", "LualineX", "LualineY", "LualineZ",
        "LualineAInactive", "LualineBInactive", "LualineCInactive",
      }

      -- Apply highlights after colorscheme loads
      vim.api.nvim_create_autocmd("ColorScheme", {
        pattern = "*",
        callback = function()
          force_bg(base_ui)
          force_bg(plugin_ui)
          -- selection tweaks
          pcall(vim.api.nvim_set_hl, 0, "PmenuSel", { bg = SEL_BG })
          pcall(vim.api.nvim_set_hl, 0, "TelescopeSelection", { bg = SEL_BG })
          pcall(vim.api.nvim_set_hl, 0, "DapUIWinSelect", { bg = SEL_BG })
        end,
      })

      -- Also enforce after VimEnter to catch late-loaded plugins
      vim.api.nvim_create_autocmd("VimEnter", {
        once = true,
        callback = function()
          force_bg(base_ui)
          force_bg(plugin_ui)
          pcall(vim.api.nvim_set_hl, 0, "PmenuSel", { bg = SEL_BG })
          pcall(vim.api.nvim_set_hl, 0, "TelescopeSelection", { bg = SEL_BG })
          pcall(vim.api.nvim_set_hl, 0, "DapUIWinSelect", { bg = SEL_BG })
        end,
      })

      -- Catch dynamically created floating windows (cmdline popups, etc.)
      vim.api.nvim_create_autocmd("WinNew", {
        pattern = "*",
        callback = function()
          force_bg({ "NormalFloat", "FloatBorder", "NoiceCmdlinePopup", "NoiceCmdlinePopupBorder" })
        end,
      })

      -- Optional: catch Noice cmdline redraws dynamically
      vim.api.nvim_create_autocmd("User", {
        pattern = "NoiceCmdlineInit",
        callback = function()
          pcall(vim.api.nvim_set_hl, 0, "NoiceCmdlinePopup", { bg = BLACK })
          pcall(vim.api.nvim_set_hl, 0, "NoiceCmdlinePopupBorder", { bg = BLACK, fg = BLACK })
          pcall(vim.api.nvim_set_hl, 0, "NoiceCmdlinePopupPrompt", { bg = BLACK })
        end,
      })
    end,
  },
}
